name: Pull Request Check

on:
  pull_request:
    branches: [ develop, main, master ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.gitignore'

jobs:
  golangci:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: v1.57.0
          args: --timeout=5m --config=.golangci.yml
          skip-cache: true
  
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Unit Tests
        run: make test-unit
      
      - name: Test Coverage
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -func=coverage.out
  
  govet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Go Vet
        run: go vet ./...
  
  gofmt:
    name: Go Fmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Check formatting
        run: |
          gofmt_files=$(gofmt -l .)
          if [[ -n ${gofmt_files} ]]; then
            echo "These files need to be formatted with gofmt:"
            echo "${gofmt_files}"
            exit 1
          fi
          echo "All Go files are properly formatted."
  
  tfproviderlint:
    name: Terraform Provider Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Install tfproviderlint
        run: go install github.com/bflad/tfproviderlint/cmd/tfproviderlint@latest
      
      - name: Terraform Provider Lint
        run: |
          echo "Running linting checks - ignoring errors that will be fixed in future phases"
          echo "Checking only critical errors and R014 (already fixed)"
          
          # Check R014 (already fixed)
          tfproviderlint \
            -AT001=false \
            -AT005=false \
            -AT012=false \
            -R001=false \
            -R017=false \
            -R019=false \
            -V013=false \
            -R014=true \
            ./...
          
          # List ignored errors (for reference)
          echo "Temporarily ignored errors (to be fixed in phases):"
          echo "- AT001: missing CheckDestroy"
          echo "- AT005: acceptance test function name should begin with TestAcc"
          echo "- AT012: file contains multiple acceptance test name prefixes"
          echo "- R001: ResourceData.Set() key argument should be string literal"
          echo "- R017: schema attributes should be stable across Terraform runs"
          echo "- R019: d.HasChanges() has many arguments, consider d.HasChangesExcept()"
          echo "- V013: custom SchemaValidateFunc should be replaced with validation.StringInSlice()"
          
          echo "See the complete correction plan in docs/LINTING.md"
          echo "Local scripts for linting are available in scripts/linting/"
  
  tfsdk-version:
    name: Check Terraform SDK version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'
          cache: true
      
      - name: Check SDK version
        run: |
          CURRENT_SDK=$(go list -m github.com/hashicorp/terraform-plugin-sdk/v2 | awk '{print $2}')
          echo "Current SDK version: $CURRENT_SDK"
          
          # Check if we're using a recent SDK version
          # This is a simplistic check; you might want to adapt it
          if [[ "$CURRENT_SDK" < "v2.10.0" ]]; then
            echo "Warning: Using an older SDK version. Consider upgrading."
          else
            echo "SDK version is sufficiently recent."
          fi 